// <auto-generated />
using System;
using FileManagerApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileManagerApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250527225642_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("FileManagerApi.Models.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("OwnerId", "FolderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileManagerApi.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OwnerId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ParentFolderId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.HasIndex("OwnerId", "ParentFolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("FileManagerApi.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId", "FileId", "FolderId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FileManagerApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FileManagerApi.Models.FileEntity", b =>
                {
                    b.HasOne("FileManagerApi.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileManagerApi.Models.User", "Owner")
                        .WithMany("Files")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("FileManagerApi.Models.Folder", b =>
                {
                    b.HasOne("FileManagerApi.Models.User", "Owner")
                        .WithMany("Folders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FileManagerApi.Models.Folder", "ParentFolder")
                        .WithMany("Subfolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("FileManagerApi.Models.Permission", b =>
                {
                    b.HasOne("FileManagerApi.Models.FileEntity", "File")
                        .WithMany("Permissions")
                        .HasForeignKey("FileId");

                    b.HasOne("FileManagerApi.Models.Folder", "Folder")
                        .WithMany("Permissions")
                        .HasForeignKey("FolderId");

                    b.HasOne("FileManagerApi.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileManagerApi.Models.FileEntity", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("FileManagerApi.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Permissions");

                    b.Navigation("Subfolders");
                });

            modelBuilder.Entity("FileManagerApi.Models.User", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Folders");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
