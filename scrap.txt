Отобранные файлы с нужными расширениями:
./appsettings.json
./Program.cs
./appsettings.Development.json
./Models/User.cs
./Models/Dtos/UserDto.cs
./Models/Dtos/UserRegisterDto.cs
./Models/Dtos/UserLoginDto.cs
./Services/AuthService.cs
./Properties/launchSettings.json
./Middlewares/ExceptionHandlingMiddleware.cs
./Middlewares/LoggingMiddleware.cs
./Controllers/AuthController.cs
./Data/AppDbContext.cs

----------------------------------------

// File ./appsettings.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "FileManagerApi": "Debug",
      "FileManagerApi.Middlewares": "Information",
      "FileManagerApi.Services.AuthService": "Debug"
    },
    "Console": {
      "FormatterName": "simple",
      "FormatterOptions": {
        "SingleLine": true,
        "TimestampFormat": "HH:mm:ss ",
        "IncludeScopes": true
      }
    }
  },
  "Storage": {
    "RootPath": "../FileStorage",
    "AllowedMimeTypes": [
      "image/jpeg",
      "image/png",
      "application/pdf",
      "text/plain",
      "application/zip"
    ],
    "MaxFileSize": 104857600
  },
  "ConnectionStrings": {
    "Default": "Data Source=FileManager.db"
  },
  "Jwt": {
    "Secret": "lDbZa/qUQPfLLYVvrSMXINEVfOjwpzBp0szl0vfcB+U/lOKNDreBzxUgwvSEAObEckPUzOBpF+ck+JrRUYPDMw==",
    "Issuer": "file-manager-api",
    "Audience": "file-manager-client",
    "ExpirationHours": 24
  }
}

----------------------------------------

// File ./Program.cs
using FileManagerApi.Data;
using FileManagerApi.Services;
using FileManagerApi.Middlewares;
using System.Security.Claims;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using System.IdentityModel.Tokens.Jwt;

var builder = WebApplication.CreateBuilder(args);

// Конфигурация сервисов
builder.Services.AddControllers();
builder.Services.AddSignalR();
builder.Services.AddEndpointsApiExplorer();

// База данных
builder.Services.AddDbContext<AppDbContext>(options => 
    options.UseSqlite(builder.Configuration.GetConnectionString("Default")));

// Кастомные сервисы
builder.Services.AddScoped(provider => 
    new AuthService(
        provider.GetRequiredService<AppDbContext>(),
        provider.GetRequiredService<IConfiguration>(),
        provider.GetRequiredService<ILogger<AuthService>>()));

// JWT аутентификация
// Program.cs
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options => 
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],

            ValidateAudience = true,
            ValidAudience = builder.Configuration["Jwt:Audience"],

            ValidateLifetime = true,
            ClockSkew = TimeSpan.Zero,

            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Secret"]!)),

            NameClaimType = JwtRegisteredClaimNames.UniqueName,
            RoleClaimType = ClaimTypes.Role
        };
    });


// Добавьте перед созданием app:
builder.Logging.ClearProviders();
builder.Logging.AddConsole();
builder.Logging.AddDebug();
builder.Logging.AddConfiguration(builder.Configuration.GetSection("Logging"));



var app = builder.Build();

// Создание хранилища файлов
var storagePath = Path.Combine(Directory.GetCurrentDirectory(), 
    builder.Configuration["Storage:RootPath"]!);
Directory.CreateDirectory(storagePath);

// Middleware pipeline
app.UseRouting();

// Добавьте middleware после UseRouting():
app.UseMiddleware<LoggingMiddleware>();
app.UseMiddleware<ExceptionHandlingMiddleware>();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

if (app.Environment.IsDevelopment())
{
    using var scope = app.Services.CreateScope();
    var db = scope.ServiceProvider.GetRequiredService<AppDbContext>();
    db.Database.Migrate();
}

app.Run();


----------------------------------------

// File ./appsettings.Development.json
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning",
      "FileManagerApi": "Debug",
      "FileManagerApi.Middlewares": "Information",
      "FileManagerApi.Services.AuthService": "Debug"
    },
    "Console": {
      "FormatterName": "simple",
      "FormatterOptions": {
        "SingleLine": true,
        "TimestampFormat": "HH:mm:ss ",
        "IncludeScopes": true
      }
    }
  },
  "Storage": {
    "RootPath": "../FileStorage",
    "AllowedMimeTypes": [
      "image/jpeg",
      "image/png",
      "application/pdf",
      "text/plain",
      "application/zip"
    ],
    "MaxFileSize": 104857600
  },
  "ConnectionStrings": {
    "Default": "Data Source=FileManager.db"
  },
  "Jwt": {
    "Secret": "lDbZa/qUQPfLLYVvrSMXINEVfOjwpzBp0szl0vfcB+U/lOKNDreBzxUgwvSEAObEckPUzOBpF+ck+JrRUYPDMw==",
    "Issuer": "file-manager-api",
    "Audience": "file-manager-client",
    "ExpirationHours": 24
  }
}

----------------------------------------

// File ./Models/User.cs
using System.ComponentModel.DataAnnotations;

namespace FileManagerApi.Models;

public class User
{
    [Key]
    public int Id { get; set; }
    
    [Required]
    [MaxLength(50)]
    public string Username { get; set; } = null!;
    
    [Required]
    public byte[] PasswordHash { get; set; } = null!;
    
    [Required]
    public byte[] PasswordSalt { get; set; } = null!;
    
    [Required]
    [EmailAddress]
    public string Email { get; set; } = null!;
    
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
    
}

----------------------------------------

// File ./Models/Dtos/UserDto.cs
namespace FileManagerApi.Models.Dtos;

public record UserDto(
    int Id,
    string Username,
    string Email,
    DateTime CreatedAt);

----------------------------------------

// File ./Models/Dtos/UserRegisterDto.cs
using System.ComponentModel.DataAnnotations;

namespace FileManagerApi.Models.Dtos;

public record UserRegisterDto(
    [Required][MinLength(3)] string Username,
    [Required][EmailAddress] string Email,
    [Required][MinLength(8)] string Password);

----------------------------------------

// File ./Models/Dtos/UserLoginDto.cs
using System.ComponentModel.DataAnnotations;

namespace FileManagerApi.Models.Dtos;

public record UserLoginDto(
    [Required] string Username,
    [Required] string Password);

----------------------------------------

// File ./Services/AuthService.cs
using System.Security.Claims;
using System.Security.Cryptography;
using FileManagerApi.Models;
using Microsoft.EntityFrameworkCore;
using FileManagerApi.Data;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Text;

namespace FileManagerApi.Services;

public class AuthService
{
    private readonly AppDbContext _context;
    private readonly IConfiguration _config;
    private readonly ILogger<AuthService> _logger;


    public AuthService(
        AppDbContext context, 
        IConfiguration config,
        ILogger<AuthService> logger)
    {
        _context = context;
        _config = config;
        _logger = logger;
    }

    public async Task<User> Register(string username, string email, string password)
    {
        using var activity = _logger.BeginScope("Registration for {Username}", username);
        try
        {
            _logger.LogInformation("Starting user registration");

            if (await _context.Users.AnyAsync(u => u.Username == username))
                throw new InvalidOperationException($"User with username '{username}' already exists");

            if (await _context.Users.AnyAsync(u => u.Email == email))
                throw new InvalidOperationException($"User with email '{email}' already exists");

            using var hmac = new HMACSHA512();
            var user = new User
            {
                Username = username,
                Email = email,
                PasswordHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password)),
                PasswordSalt = hmac.Key,
                CreatedAt = DateTime.UtcNow
            };

            _context.Users.Add(user);
            await _context.SaveChangesAsync();

            _logger.LogInformation(
                "User registered successfully. UserID: {UserId}, Email: {Email}",
                user.Id,
                user.Email);


            return user;
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "Registration failed for {Username}. Error: {ErrorMessage}",
                username,
                ex.Message);
            throw;
        }
    }

    public async Task<string> Login(string usernameOrEmail, string password)
    {
        using var activity = _logger.BeginScope("Login attempt for {UsernameOrEmail}", usernameOrEmail);
        try
        {
            _logger.LogDebug("Starting authentication process");

            var user = await _context.Users
                .FirstOrDefaultAsync(u => u.Username == usernameOrEmail || u.Email == usernameOrEmail);

            if (user is null)
            {
                _logger.LogWarning("User not found: {UsernameOrEmail}", usernameOrEmail);
                throw new UnauthorizedAccessException("Invalid credentials");
            }

            _logger.LogDebug("User found. Checking password...");

            using var hmac = new HMACSHA512(user.PasswordSalt);
            var computedHash = hmac.ComputeHash(Encoding.UTF8.GetBytes(password));

            if (!computedHash.SequenceEqual(user.PasswordHash))
            {
                _logger.LogWarning("Invalid password for {UsernameOrEmail}", usernameOrEmail);
                throw new UnauthorizedAccessException("Invalid credentials");
            }

            _logger.LogInformation("Successful login for {UsernameOrEmail}", usernameOrEmail);
            return GenerateJwtToken(user);
        }
        catch (Exception ex)
        {
            _logger.LogError(
                ex,
                "Login failed for {UsernameOrEmail}. Error: {ErrorMessage}",
                usernameOrEmail,
                ex.Message);
            throw;
        }
    }

    private string GenerateJwtToken(User user)
    {
        try
        {
            _logger.LogDebug("Generating JWT token for {UserId}", user.Id);

            var claims = new List<Claim>
            {

                new(JwtRegisteredClaimNames.Sub, user.Id.ToString()),
                new(JwtRegisteredClaimNames.UniqueName, user.Username),
                new(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
            };

            var key = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(_config["Jwt:Secret"]!));

            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var expires = DateTime.UtcNow.AddMinutes(
                int.TryParse(_config["Jwt:TokenLifetimeMinutes"], out var val) ? val : 20);

            var token = new JwtSecurityToken(
                issuer: _config["Jwt:Issuer"],
                audience: _config["Jwt:Audience"],
                claims: claims,
                expires: expires,
                signingCredentials: creds
            );

            var jwt = new JwtSecurityTokenHandler().WriteToken(token);
            _logger.LogDebug("JWT for {User}: {Jwt}", user.Username, jwt);

            return jwt;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to generate JWT for {User}", user.Id);
            throw;
        }
    }
}


----------------------------------------

// File ./Properties/launchSettings.json
﻿{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:5991",
      "sslPort": 0
    }
  },
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "http://localhost:5019",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


----------------------------------------

// File ./Middlewares/ExceptionHandlingMiddleware.cs
using System.Net;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System.Text.Json;

namespace FileManagerApi.Middlewares;

public class ExceptionHandlingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<ExceptionHandlingMiddleware> _logger;

    public ExceptionHandlingMiddleware(
        RequestDelegate next,
        ILogger<ExceptionHandlingMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            await _next(context);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "An error occurred");
            await HandleExceptionAsync(context, ex);
        }
    }

    private static Task HandleExceptionAsync(HttpContext context, Exception exception)
    {
        context.Response.ContentType = "application/json";
        context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;

        var response = new
        {
            error = "Internal Server Error",
            message = exception.Message,
            stackTrace = context.RequestServices.GetService<IHostEnvironment>()?.IsDevelopment() == true 
                ? exception.StackTrace 
                : null
        };

        return context.Response.WriteAsync(JsonSerializer.Serialize(response));
    }
}

----------------------------------------

// File ./Middlewares/LoggingMiddleware.cs
using System.Text;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;

namespace FileManagerApi.Middlewares;

public class LoggingMiddleware
{
    private readonly RequestDelegate _next;
    private readonly ILogger<LoggingMiddleware> _logger;

    public LoggingMiddleware(
        RequestDelegate next,
        ILogger<LoggingMiddleware> logger)
    {
        _next = next;
        _logger = logger;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        try
        {
            var request = await FormatRequest(context.Request);
            _logger.LogInformation("Request: {Request}", request);

            var originalBodyStream = context.Response.Body;
            using var responseBody = new MemoryStream();
            context.Response.Body = responseBody;

            var startTime = DateTime.UtcNow;
            await _next(context);
            var elapsed = DateTime.UtcNow - startTime;

            var response = await FormatResponse(context.Response);
            _logger.LogInformation("Response: {Response} | Time: {Elapsed}ms", 
                response, elapsed.TotalMilliseconds.ToString("0"));

            await responseBody.CopyToAsync(originalBodyStream);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Unhandled exception");
            throw;
        }
    }

    private static async Task<string> FormatRequest(HttpRequest request)
    {
        request.EnableBuffering();
        var body = await new StreamReader(request.Body)
            .ReadToEndAsync();
        request.Body.Position = 0;

        return $"{request.Method} {request.Path}{request.QueryString} {body}";
    }

    private static async Task<string> FormatResponse(HttpResponse response)
    {
        response.Body.Seek(0, SeekOrigin.Begin);
        var body = await new StreamReader(response.Body).ReadToEndAsync();
        response.Body.Seek(0, SeekOrigin.Begin);
        
        return $"HTTP {response.StatusCode} {body}";
    }
}

----------------------------------------

// File ./Controllers/AuthController.cs
using FileManagerApi.Models.Dtos;
using FileManagerApi.Services;
using Microsoft.AspNetCore.Mvc;
using FileManagerApi.Models;

namespace FileManagerApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    private readonly AuthService _authService;

    public AuthController(AuthService authService)
    {
        _authService = authService;
    }

    [HttpPost("register")]
    public async Task<ActionResult<UserDto>> Register(UserRegisterDto dto)
    {
        var user = await _authService.Register(dto.Username, dto.Email, dto.Password);
        return new UserDto(user.Id, user.Username, user.Email, user.CreatedAt);
    }

    [HttpPost("login")]
    public async Task<ActionResult<string>> Login(UserLoginDto dto)
    {
        var token = await _authService.Login(dto.Username, dto.Password);
        return Ok(new { Token = token });
    }
}

----------------------------------------

// File ./Data/AppDbContext.cs
using FileManagerApi.Models;
using Microsoft.EntityFrameworkCore;

namespace FileManagerApi.Data;

public class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options) { }

    public DbSet<User> Users => Set<User>();

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<User>()
            .HasIndex(u => u.Username)
            .IsUnique();

        modelBuilder.Entity<User>()
            .HasIndex(u => u.Email)
            .IsUnique();
    }
}

----------------------------------------


